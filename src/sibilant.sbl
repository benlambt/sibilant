(var sibilant exports
     util     (require 'util)
     path     (require 'path)
     fs       (require 'fs)
     error    (#(str) (throw str))
     inspect  util.inspect)

(include "../include/functional")

(def sibilant.package-info ()
  (var fs (require 'fs))
  (JSON.parse (fs.read-file-sync
               (concat **dirname "/../package.json"))))

(def sibilant.version-string ()
  (var package (sibilant.package-info)
       path (require 'path))
  (concat package.name " version " package.version
          "\n(at " (path.join **dirname "..") ")"))

(def sibilant.strip-shebang (data)
  (data.replace /^#!.*\n/ ""))

(set sibilant
     'file 'eval.sibilant
     'dir  (process.cwd))

(def with-dir-and-file (dir file fn)
  (var before { dir sibilant.dir
                file sibilant.file })
  (set sibilant
       'dir  dir
       'file file)

  (var retval (fn))

  (set sibilant
       'dir  before.dir
       'file before.file)

  retval)


(def sibilant.translate-file (file-name)
  (with-dir-and-file (path.dirname file-name) file-name
                     (#> (sibilant.translate-all
                          (sibilant.strip-shebang
                           (fs.read-file-sync file-name "utf8"))))))

(def sibilant.translate-json (file-name)
  (var before (sibilant.macros.state 'quote-keys))
  (sibilant.macros.state 'quote-keys true)
  (var content (sibilant.translate-file file-name))
  (sibilant.macros.state 'quote-keys before)
  content)


(def sibilant.version ()
  (get (sibilant.package-info) 'version))

(set require.extensions ".sbl"
     (#(module filename)
       (var content (sibilant.translate-file filename))
       (module.*compile content filename)))

(set require.extensions ".son"
     (#(module filename)
       (var content (sibilant.translate-json filename))
       (set module 'exports (JSON.parse content))))

(def sibilant.include (file)
  (when (not (file.match (regex ".sbl$")))
    (assign file (concat file ".sbl")))

  (when (file.match (regex "^\.\.?/"))
    (assign file (concat sibilant.dir "/" file)))

  (try
    (do
      (var resolved (require.resolve file))
      (sibilant.translate-file resolved))
    (error (concat "Failed to resolve file for inclusion: " file))))

(include "../src/core")

(def macros.include (file)
  (sibilant.include (eval (translate file))))

(sibilant.include (path.normalize (concat **dirname "/../include/macros")))
