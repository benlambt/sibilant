(chainable $)

((#(root)
  (var sibilant {} exports {})
  (def error (str) (throw str))
  (def inspect (item) (if item.to-source (item.to-source) (item.to-string)))
  (set root 'sibilant sibilant)
  (include "../include/functional")
  (include "../src/core")
  (when (defined? $)
    ($ (#>
        (var sibilant root.sibilant
             scripts [])

        (def eval-code (js)
          ((new Function js)))

        (def sibilant.script-loaded ()
          (var lisp: null, js: null)
          (when (not (sibilant.load-next-script))
            ($ "script[type=\"text/sibilant\"]:not([src])"
               (each (#>
                       (assign lisp ($ this
                                       (text)
                                       (replace /(^\s*\/\/\<!\[CDATA\[)|(\/\/\]\]>\s*$)/g ""
                                                 ))
                             js (sibilant.translate-all lisp))

                       ($ this (data 'js js))
                       (eval-code js))))))

          (assign scripts
                  ($.make-array ($ "script[type=\"text/sibilant\"][src]"
                                   (map (#> this.src)))))

          (def sibilant.load-next-script ()
            (var next-script (scripts.shift))
            (when (defined? next-script)
              ($.get next-script (#(data)
                                   (eval-code  (sibilant.translate-all data))
                                   (sibilant.script-loaded)))
              true))

        (sibilant.load-next-script))))) this)
