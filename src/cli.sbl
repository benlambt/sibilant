(var sibilant (require "./sibilant")
     path     (require 'path)
     options  (require "../lib/options")
     fs       (require 'fs)
     mod      (require 'module))

(def run-in-sandbox (js &optional input-path)
  (when (undefined? input-path)
    (assign input-path "."))
  (set require.main
       'module-cache {}
       'filename (fs.realpath-sync input-path)
       'paths (mod.*node-module-paths
               (path.dirname
                (fs.realpath-sync input-path))))
  (require.main.*compile js require.main.filename))


(defhash cli
         v         'version
         h         'help
         unhandled 'help
         f         'file
         o         'output
         x         'execute
         e         'eval
         i         'input
         w         'wrap
         after-break false
         execute   false
         unlabeled 'file)

(def cli.version ()
     (console.log (sibilant.version-string)))

(def cli.repl (args) (require "../lib/repl"))

(def read-stdin (fn)
     (var stdin process.stdin
          data "")
     (stdin.resume)
     (stdin.set-encoding "utf8")
     (stdin.on 'data (#(chunk) (assign data (concat data chunk))))
     (stdin.on 'end (#> (fn data))))

(def cli.eval (args options)
     (set options 'execute true)
     (cli.input args options))

(def cli.input (args options)
     (def process (sibilant-code)
          (var js-code (sibilant.translate-all sibilant-code))
          (if options.execute
            (run-in-sandbox js-code)
            (console.log js-code)))
     (if (empty? args)
       (read-stdin process)
       (process (first args))))

(def cli.help (args options)
     (fs.read-file (concat **dirname "/../cli-help") { encoding 'utf8 }
                   (#(err data)
                     (when err (throw err))
                     (console.log data))))
(var wrap? false)
(def cli.wrap (args options)
  (assign wrap? true))

(var cli-options (options cli)
     args (or cli-options.after-break []))

(args.unshift (second process.argv) "FILENAME")

(set process 'argv args 'ARGV args)

(when (empty? (keys cli-options)) (cli.repl))

(var output-dir
     (when cli-options.output (first cli-options.output)))

(each (input-file) (or cli-options.file [])
  (var input-path (path.join (process.cwd) input-file)
       input-extname (path.extname input-path)
       translated (if (= ".son" input-extname)
                    (sibilant.translate-json input-path)
                    (sibilant.translate-file input-path)))

  (when wrap?
    (assign translated (concat "(function(){\n" translated "}())\n")))

  (if output-dir
    (do
      (var output-extname (if (= ".son" input-extname)
                            ".json" ".js")
           input-basename (path.basename input-path input-extname)
           output-path (concat (path.join output-dir input-basename)
                               output-extname))
      (fs.write-file output-path translated))
    (if cli-options.execute
      (run-in-sandbox translated input-path)
      (console.log translated))))
